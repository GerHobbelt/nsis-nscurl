
NScurl - NSIS libcurl plugin
Marius Negru»õiu (marius.negrutiu@protonmail.com)
_________________________________________________________________________________________________

Features:
- Multi-threaded: download multiple files in parallel
- Asynchronous: start a download now, check its status later
- Aggressive: multiple attempts to connect, multiple attempts to reconnect, resume interrupted transfers, etc
- NSIS aware: download files at any installation stage (from .onInit, from Sections, from custom pages, silent installers, etc)
- Informative: plenty of useful information is available for each download (size, speed, HTTP status, HTTP headers, etc)
- Supports all relevant HTTP methods (GET, POST, HEAD, etc)
- Supports custom HTTP headers and data
- Supports proxy servers (both authenticated and open)
- Supports files larger than 4GB
- Can download remote content to RAM instead of a file
- Many more...

Examples:
	# Quick transfer, single file
	NScurl::Transfer /URL "http://MyServer/MyFile" /LOCAL "$TEMP\MyFile" /MODE Page /ABORT "Abort Title" "Are you sure?" /END
	Pop $0 ; Status text ("OK" for success)
	DetailPrint "Status: $0"

	# Parallel transfer, multiple files
	; Start the downloads
	NScurl::Request /URL "http://MyServer1/MyFile1" /LOCAL "$TEMP\MyFile1" /END
	Pop $1 ; Request ID1
	NScurl::Request /URL "http://MyServer2/MyFile2" /LOCAL "$TEMP\MyFile2" /END
	Pop $2 ; Request ID2
	NScurl::Request /URL "http://MyServer3/MyFile3" /LOCAL "$TEMP\MyFile3" /END
	Pop $3 ; Request ID3
	
	; ...do other useful stuff...
	
	; Wait for all downloads to complete
	NScurl::Wait /MODE Page /ABORT "Abort" "Are you sure?" /END

	; Query status (1)
	NScurl::Query /ID $1 /ERRORCODE /END
	Pop $0 ; Error code (HTTP status 200-299 for success)
	DetailPrint "Status1: $0"
	; Query status (2)
	NScurl::Query /ID $2 /ERRORCODE /END
	Pop $0 ; Error code (HTTP status 200-299 for success)
	DetailPrint "Status2: $0"
	; Query status (3)
	NScurl::Query /ID $3 /ERRORCODE /END
	Pop $0 ; Error code (HTTP status 200-299 for success)
	DetailPrint "Status3: $0"

	; ...you got the idea...
_________________________________________________________________________________________________

NScurl::Transfer	[/PRIORITY prio] [/DEPEND id]
					[/METHOD GET|POST]
					/URL url
					[/LOCAL file|MEMORY|NONE]
					[/HEADERS hdr]
					[/DATA data | /DATAFILE file]
					[/TIMEOUTCONNECT msec] [/TIMEOUTRECONNECT msec]
					[/OPTCONNECTRETRIES count] [/OPTCONNECTTIMEOUT msec] [/OPTRECEIVETIMEOUT msec] [/OPTSENDTIMEOUT msec]
					[/PROXY server] [/PROXYUSER user] [/PROXYPASS pass]
					[/REFERER url]
					[/INTERNETFLAGS flags] [/SECURITYFLAGS flags]
					[/MODE SILENT|POPUP|PAGE]
					[/TITLEHWND Wnd] [/STATUSHWND Wnd] [/PROGRESSHWND Wnd]
					[/TITLETEXT Text MultiText] [/STATUSTEXT Text Multitext]
					[/ABORT Title Message]
					/END

Remarks:
	Make a (single) HTTP request, wait for it to complete and return the status code.
	This routine is recommended if you only need to transfer one file at a time.

	To transfer multiple files in parallel, you must use lower level functions (Request(1) + Request(2) + ... + Request(n) + [...] + Wait(*) + Query(*))
	
Parameters:
	[...]						| Check out "Request" parameters!
	[...]						| Check out "Wait" parameters!
	/END						| Must conclude the parameter list, otherwise the NSIS stack will be emptied...

Return:
	[Stack] "OK" for successful transfers, or an error string (HTTP or Win32) otherwise
_________________________________________________________________________________________________

NScurl::http		GET|POST|HEAD|PUT|...
					URL
					file|MEMORY
					[/HEADER hdr1]...[/HEADER hdrN]
					[/DATA data|@datafile]
					[/POSTVAR [FILENAME=file_name] [TYPE=mime_type] name data|@datafile]...[/POSTVAR ...]
					[/RESUME]
					[/TIMEOUT | /CONNECTTIMEOUT msec]
					[/COMPLETETIMEOUT msec]
					[/PROXY server] [/PROXYUSER user] [/PROXYPASS pass]
					[/REFERER url]
					[/USERAGENT agent]
					[/NOREDIRECT]
					[/INSECURE]
					[/CERT thumbprint1]...[/CERT thumbprintN]
					[/CACERT cacert.pem_path]
					[/BACKGROUND] [/SILENT] [/POPUP]
					[/TITLEWND hwnd] [/TEXTWND hwnd] [/PROGRESSWND hwnd]
					/END

Remarks:
	Add a transfer request to the queue.
	The transfer will start as soon as a worker thread becomes available.
	This command will not display any GUI.
	
Parameters:
	GET|POST|HEAD|...			| HTTP Method (default: GET)
	URL							| HTTP or HTTPS...
	path|MEMORY					| Destination file path or MEMORY. When downloading to memory the remote content can be retrieved with query( "@RECVDATA@" )
	/HEADER hdr					| Additional HTTP request header(s), delimited by CRLF ($\r$\n). Multiple /HEADER parameters are accepted
	/DATA data|@datafile		| Data string/file to be uploaded. Valid for POST and PUT, ignored otherwise
	/POSTVAR					| Multipart form part. Used only with POST, ignored otherwise. Multiple /POSTVAR parameters are accepted
		[FILENAME=file_name]	|	Optional. Remote file name (e.g. "mydata.json")
		[TYPE=mime_type]		|	Optional. MIME type (e.g. "application\json")
		name					|	Part name (e.g. "MyData")
		data|@datafile			|	Part data string/file
	/RESUME						| Resume existing file. By default they are overwritten
	/CONNECTTIMEOUT msec		| Connect timeout (default: infinite)
	/COMPLETETIMEOUT msec		| Connect + Transfer timeout (default: infinite)
	/TIMEOUT msec				| Identical to /CONNECTTIMEOUT
	/PROXY server				| CERN type proxies (ex: "http=http://my_proxy:my_port"). SOCKS proxies are supported if Internet Explorer is installed
	/PROXYUSER user				| Optional username for authenticated proxies
	/PROXYPASS pass				| Optional password for authenticated proxies
	/REFERER url				| Optional referer URL, passed to InternetOpenRequest
	/USERAGENT agent			| Optional user agent
	/NOREDIRECT					| Don't follow HTTP redirections. They are followed by default
	/INSECURE					| No SSL validation. Accept any server certificate. This parameter overwrites /CERT and /CACERT (default: false)
	/CERT thumbprint			| Specify a TRUSTED certificate server. Multiple /CERT parameters are accepted (e.g. /CERT 917e732d330f9a12404f73d8bea36948b929dffc). This parameter overwrites /CACERT
	/CACERT <dir\cacert.pem>	| Specify a custom cacert.pem file. By default a built-in cacert.pem is extracted and used
	/BACKGROUND					| Don't wait for the transfer to complete. The HTTP request is added to the queue and handled in the background. The call returns a unique transfer ID that your can use later to NScurl::wait() or NScurl::query() the status
	/SILENT						| Wait silently for the transfer to complete. No visual progress is displayed
	/POPUP						| Wait for the transfer to complete. Progress is displayed on a pop-up window
	/CANCEL						| Enable Cancel button when waiting in Page-mode or Popup-mode
	/TITLEWND hwnd				| Title window handle
	/TEXTWND hwnd				| Text window handle
	/PROGRESSWND hwnd			| Progress bar window handle
	/END						| Must conclude the parameter list

Return:
	[Stack] Returns two possible values
	1. An error code (e.g. "OK", "Not Found", etc.) by default
	2. An unique request ID if /BACKGROUND parameter was specified

Examples:

	; Download to file
	NScurl::http GET "http://live.sysinternals.com/Files/SysinternalsSuite.zip" "$EXEDIR\SysinternalsSuite.zip" /TIMEOUT 60000 /END
	Pop $0	; Transfer status ("OK" for success)

	; Download to memory
	NScurl::http GET "https://httpbin.org/get?param1=va1&param2=val2" MEMORY /END
	Pop $0

	; POST a form (multipart/form-data)
	NScurl::HTTP \
		POST \
		"http://httpbin.org/post?param1=va1&param2=val2" \
		"Post.json" \
		/POSTVAR "User" "Your username here" \
		/POSTVAR "Pass" "Your password here" \
		/POSTVAR "filename=image.jpeg" type=image/jpeg "Photo" "@$DESKTOP\My photo.jpg" \
		/END
	Pop $0

	; POST a json (application/json)
	NScurl::http \
		POST \
		"http://httpbin.org/post?param1=va1&param2=val2" \
		"Post.json" \
		/DATA "@$DESKTOP\My file.json" \
		/HEADER "Content-Type: application/json" \
		/END
	Pop $0

	; Download in background
	NScurl::http GET "http://live.sysinternals.com/Files/SysinternalsSuite.zip" "$EXEDIR\SysinternalsSuite.zip" /BACKGROUND /END
	Pop $0	; Unique transfer ID
	[...]
	NScurl::wait /ID $0 /END
	[...]
	NScurl::query /ID $0 "@ERROR@"
	Pop $1	; Transfer status ("OK" for success)
_____________________________________________________________________________________________________

NScurl::Wait		[/ID id]
					[/MODE SILENT|POPUP|PAGE]
					[/TITLEHWND Wnd] [/STATUSHWND Wnd] [/PROGRESSHWND Wnd]
					[/TITLETEXT Text MultiText] [/STATUSTEXT Text Multitext]
					[/ABORT Title Message]
					/END

Remarks:
	Wait for one or multiple transfers to complete

	Waiting modes:
	- SILENT					| No GUI is displayed, the call returns when transfer(s) complete(s)
	- POPUP						| Progress is displayed on a popup window
	- PAGE						| Progress is displayed on an installer page (InstFiles or custom). This mode is available only when the installer is visible.

	SILENT and POPUP modes are available at all times, including silent installers.
	PAGE mode requires that the installer is visible, and a page is currently active. In silent installers, PAGE mode is automatically converted to SILENT mode.

	All displayed texts can be customized.
	The plugin will choose between "Text" and "MultiText", based on whether waiting for one or multiple transfers
	All texts may contain keywords that are automatically replaced at runtime.

	Transfer-specific keywords:
	{ID}						| The request ID returned by NScurl::Request
	{STATUS}					| "Waiting", "Downloading" or "Complete" (English only)
	{WININETSTATUS}				| The last status reported by the InternetCallback (http://msdn.microsoft.com/EN-US/library/windows/desktop/aa385121(v=vs.85).aspx)
	{METHOD}					| The HTTP method in use (GET, POST, HEAD, etc.)
	{URL}						| Full URI
	{IP}						| Server's IP address, or an empty string
	{PROXY}						| The proxy server, or an empty string
	{LOCAL}						| The local destination (file path|Memory|None)
	{LOCALFILEDIR}				| The file directory (no name), extracted from the local path
	{LOCALFILENAME}				| The file name (no path), extracted from the local path
	{FILESIZE}					| The remote content length, nicely formatted (ex: "1,3 GB")
	{FILESIZEBYTES}				| The remote content length (can exceed 4GB (32-bit boundary))
	{RECVSIZE}					| The amount of bytes received, nicely formatted (ex: "1,3 GB")
	{RECVSIZEBYTES}				| The amount of bytes received
	{PERCENT}					| Percent (0-100)
	{SPEED}						| Transfer speed (nicely formatted, ex: "1,4 MB/s")
	{SPEEDBYTES}				| Transfer speed (bytes/second)
	{TIMESTART}					| The timestamp when the transfer has started (ex: 2014/10/18 08:24)
	{TIMEELAPSED}				| Amount of time since the transfer has started (ex: 3 min, 2 sec)
	{TIMEREMAINING}				| Estimated amount of time until the transfer will complete (ex: 10 min, 35 sec)

	Global keywords:
	{TOTALCOUNT}				| The overall number of requests (waiting + downloading + complete)
	{TOTALWAITING}				| The number of waiting requests
	{TOTALACTIVE}				| The number of downloading + complete requests
	{TOTALDOWNLOADING}			| The number of requests in progress
	{TOTALCOMPLETE}				| The number of complete requests
	{TOTALRECVSIZE}				| The amount of bytes received, nicely formatted (ex: "1,3 GB")
	{TOTALRECVSIZEBYTES}		| The amount of bytes received
	{TOTALSPEED}				| The combined speed of transfers in progress (nicely formatted, ex: "1,4 MB/s")
	{TOTALSPEEDBYTES}			| The combined speed of transfers in progress (bytes/second)
	{TOTALTHREADS}				| Worker thread count
	{ORIGINALTITLE}				| The original title text 
	{ORIGINALSTATUS}			| The original status text
	{PLUGINNAME}				| Plugin name ("NScurl")
	{PLUGINVERSION}				| Plugin version
	{ANIMLINE}					| The classic \|/- animation
	{ANIMDOTS}					| The classic ./../... animation

Parameters:
	/ID id						| Wait for a specific transfer. If not specified, we're waiting for all transfers
	/MODE						| Wait mode
	/TITLEHWND					| Custom control to display the Title text
	/STATUSHWND					| Custom control to display the Status text
	/PROGRESSHWND				| Custom progress control
	/TITLETEXT Text MultiText	| The Title text. "Text" is displayed when waiting for a single transfer, whereas "MultiText" is displayed when waiting for multiple transfers. Both texts may contain keywords
	/STATUSTEXT Text MultiText	| The Status text. "Text" is displayed when waiting for a single transfer, whereas "MultiText" is displayed when waiting for multiple transfers. Both texts may contain keywords
	/ABORT Title Message		| The transfer can be aborted. If Message is not empty, a confirmation box (Yes/No) will be diaplayed. If Message is empty, the transfer will abort quietly. By default abortion is disabled
	/END						| Must conclude the parameter list, otherwise the NSIS stack will be emptied...

Return:
	[Stack] Result code. Ignore it!

Examples:
	; Wait for requests with priority 2000 (Popup mode)
	NScurl::Wait \
		/MODE POPUP \
		/STATUSTEXT \
			"Received {RECVSIZE}/{FILESIZE} @ {SPEED}, ETA: {TIMEREMAINING}$\n{URL}" \
			"Downloading {TOTALACTIVE}/{TOTALCOUNT} files. Received {TOTALRECVSIZE} @ {TOTALSPEED}" \
		/TITLETEXT \
			"{PERCENT}% - Downloading..." \
			"Downloading {TOTALCOUNT} files..." \
		/ABORT "Abort" "Are your sure?"
	Pop $0
_________________________________________________________________________________________________

NScurl::Enumerate	[/STATUS Waiting|Running|Complete]...[/STATUS ...]
					/END

Remarks:
	Enumerate requests from the queue.

Parameters:
	/STATUS						| Filter requests by status. Multiple /STATUS parameters are accepted
	/END						| Must conclude the parameter list

Return:
	[Stack] ID1
	[Stack] ID2
	[Stack] ...
	[Stack] IDn
	[Stack] ""					| An empty string marks the end of the enumeration

Example:
	; Enumerate Waiting + Running requests
	NScurl::Enumerate /STATUS Waiting /STATUS Running /END
_enum_loop:
	Pop $0
	StrCmp $0 "" _enum_end
	DetailPrint "Request ID = $0"
	Goto _enum_loop
_enum_end:
_________________________________________________________________________________________________

NScurl::Query	/ID id
				[/STATUS waiting|downloading|completed]
				[/METHOD] [/URL] [/IP] [/PROXY] [/OUT]
				[/SENTHEADERS] [/RECVHEADERS]
				[/FILESIZE] [/RECVSIZE] [/PERCENT] [/SPEEDBYTES] [/SPEED]
				[/CONTENT] [/DATA]
				[/TIMEWAITING] [/TIMEDOWNLOADING]
				[/CONNECTIONDROPS]
				[/ERRORCODE] [/ERRORTEXT]
				/END

Remarks:
	Query information about a specific transfer request.

Parameters:
	/ID id					| The request ID returned by NScurl::Request
	-----------             | ------------------
	/PRIORITY				| Request priority
	/DEPEND					| Dependency ID
	/STATUS					| Request status (waiting|downloading|completed)
	/METHOD					| The HTTP method in use (GET, POST, HEAD, etc.)
	/URL					| Full URL
	/IP						| Server's IP address, or an empty string
	/PROXY					| The proxy server, or an empty string
	/OUT					| Remote content destination (file|MEMORY)
	/SENTHEADERS			| The raw HTTP request headers
	/RECVHEADERS			| The raw HTTP reply headers
	/FILESIZE				| The remote content length (can exceed 4GB (32-bit boundary))
	/RECVSIZE				| The amount of bytes received so far
	/PERCENT				| Percent (0-100)
	/SPEED					| Transfer speed (nicely formatted, ex: "1,4 MB/s")
	/SPEEDBYTES				| Transfer speed (bytes/second)
	/CONTENT				| Retrieves the remote content (max NSIS_MAX_STRLEN) downloaded to memory. Non-printable characters will be replaced with '.'
	/DATA					| Retrieves the data sent to the server (max NSIS_MAX_STRLEN). Non-printable characters will be replaced with '.'
	/TIMEWAITING			| Amount of time (milliseconds) spent waiting in queue
	/TIMEDOWNLOADING		| Amount of time (milliseconds) spent transferring
	/ERRORCODE				| Win32 error code, or HTTP status code
	/ERRORTEXT				| The error explained
	/END					| Must conclude the parameter list, otherwise the NSIS stack will be emptied...

Return:
	A value for each parameter, in the same order
	[Stack] Value1
	[Stack] Value2
	[Stack] ...
	[Stack] ValueN

Example:
	NScurl::Query /ID $varID /STATUS /URL /PERCENT /SPEED /END
	Pop $0	;Status
	Pop $1	;URL
	Pop $2	;Percent
	Pop $3	;Speed
	DetailPrint "Status:$0, URL:$1, Percent:$2, Speed:$3"
_________________________________________________________________________________________________

NScurl::Set			[/ID id]
					[/ABORT]
					[/REMOVE]
					/END

Remarks:
	Modify one or multiple transfer requests
	When aborting a file transfer, the received content is not removed from disk
	The caller is responsible for cleaning up unfinished/aborted downloads

Parameters:
	/ID id					| Modify specific request. If not specified, all requests will be modified
	/ABORT					| Abort specified transfers, and keep them in the queue for later querying
	/REMOVE					| Abort specified transfers and remove them from the queue
	/END					| Must conclude the parameter list, otherwise the NSIS stack will be emptied...

Return:
	[Stack] Result code. Ignore it!

Examples:
	; Abort all transfers
	NScurl::Set /ABORT /END

	; Abort a specific transfer
	NScurl::Set /ID 666 /ABORT /END

	; Abort all and clear the queue
	NScurl::Set /REMOVE /END
_________________________________________________________________________________________________

NScurl::QueryGlobal [/TOTALCOUNT] [/TOTALWAITING] [/TOTALDOWNLOADING] [/TOTALCOMPLETED]
					[/TOTALSPEED] [/TOTALSPEEDBYTES]
					[/TOTALTHREADS]
					[/PLUGINNAME] [/PLUGINVERSION]
					[/USERAGENT]
					/END

Remarks:
	Query global information.

Parameters:
	/TOTALCOUNT				| The overall number of requests (waiting + downloading + completed)
	/TOTALWAITING			| The number of waiting requests
	/TOTALDOWNLOADING		| The number of requests in progress
	/TOTALCOMPLETED			| The number of completed requests
	/TOTALRECVSIZE			| The amount of bytes received, nicely formatted (ex: "1,3 GB")
	/TOTALRECVSIZEBYTES		| The amount of bytes received
	/TOTALSPEED				| The combined speed of requests in progress (nicely formatted, ex: "1,4 MB/s")
	/TOTALSPEEDBYTES		| The combined speed of requests in progress (bytes/second)
	/TOTALTHREADS			| Worker thread count
	/PLUGINNAME				| "NScurl"
	/PLUGINVERSION			| Version string such as "1.2014.11.16"
	/USERAGENT				| User agent (ex: "Mozilla/5.0 (Windows; WOW64) xfer/1.0")
	/END					| Must conclude the parameter list, otherwise the NSIS stack will be emptied...

Return:
	A value for each parameter, in the same order
	[Stack] Value1
	[Stack] Value2
	[Stack] ...
	[Stack] ValueN

Example:
	NScurl::QueryGlobal /TOTALCOUNT /TOTALCOMPLETED /TOTALDOWNLOADING /TOTALSPEED /TOTALTHREADS /END
	Pop $R0 ; Total
	Pop $R1 ; Completed
	Pop $R2 ; Downloading
	Pop $R3 ; Speed
	Pop $R4 ; Worker threads

	DetailPrint "Transferring $R1+$R2/$R0 files at $R3 using $R4 worker threads"
_________________________________________________________________________________________________

NScurl::md5    <file>
NScurl::sha1   <file>
NScurl::sha256 <file>

Remarks:
	Compute file hash

Parameters:
	<file>					| Full path

Return:
	[Stack] The hash as hex-encoded string, or an empty string for errors
	e.g. md5:  "00112233445566778899aabbccddeeff" (32 characters, 16 bytes, 128 bits)
	e.g. sha1: "00112233445566778899aabbccddeeff00112233" (40 characters, 20 bytes, 160 bits)
	e.g. sha2: "00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff" (64 characters, 32 bytes, 256 bits)

Examples:
	NScurl::md5 $EXEPATH
	Pop $0
_________________________________________________________________________________________________

_________________________________________________________________________________________________

NScurl::escape <str>
NScurl::unescape <str>

Remarks:
	Converts the "plain string" to/from an URL-encoded string

Parameters:
	<str>					| Escaped/Unescaped string

Return:
	[Stack] The un/escaped string

Examples:
	NScurl::escape "aaa bbb"
	Pop $0 ; "aaa%20bbb"

	NScurl::unescape "aaa%20bbb"
	Pop $0 ; "aaa bbb"
